// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CarStatus {
  PARKED
  REQUESTED
  READY
  CHECKED_OUT
}




model Location {
  id        Int      @id @default(autoincrement())
  name      String
  entrances Entrance[]
  employees Employee[]
}

model Entrance {
  id         Int      @id @default(autoincrement())
  name       String
  location   Location @relation(fields: [locationId], references: [id])
  locationId Int
}

model Employee{
  id        Int      @id @default(autoincrement())
  name      String
  pin       String  @unique
  location  Location @relation(fields: [locationId], references: [id])
  locationId Int
  ParkedCars     Car[] @relation("ParkedCars")
  CheckedOutCars Car[] @relation("CheckedOutCars")
}

model Car {
  id             Int       @id @default(autoincrement())
  ticket         String    @unique
  phoneNumber    String
  make           String
  model          String
  color          String
  status         CarStatus @default(PARKED)
  requestedAt    DateTime?
  readyAt        DateTime?
  checkedOutAt   DateTime?

  parkedById     Int?
  parkedBy       Employee? @relation("ParkedCars", fields: [parkedById], references: [id], onDelete: SetNull)

  checkedOutById Int?
  checkedOutBy   Employee? @relation("CheckedOutCars", fields: [checkedOutById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}

